// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: price.sql

package db

import (
	"context"
)

const createPrice = `-- name: CreatePrice :one
INSERT INTO prices (
  class, price, event
) VALUES (
  $1, $2, $3
)
RETURNING id, created_at, updated_at, deleted_at, class, price, event
`

type CreatePriceParams struct {
	Class string  `json:"class"`
	Price float64 `json:"price"`
	Event int32   `json:"event"`
}

func (q *Queries) CreatePrice(ctx context.Context, arg CreatePriceParams) (Price, error) {
	row := q.db.QueryRowContext(ctx, createPrice, arg.Class, arg.Price, arg.Event)
	var i Price
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.Class,
		&i.Price,
		&i.Event,
	)
	return i, err
}

const getPrice = `-- name: GetPrice :one
SELECT id, created_at, updated_at, deleted_at, class, price, event FROM prices
WHERE id = $1
`

func (q *Queries) GetPrice(ctx context.Context, id int64) (Price, error) {
	row := q.db.QueryRowContext(ctx, getPrice, id)
	var i Price
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.Class,
		&i.Price,
		&i.Event,
	)
	return i, err
}

const listAllPrices = `-- name: ListAllPrices :many
SELECT id, created_at, updated_at, deleted_at, class, price, event FROM prices
LIMIT $1
OFFSET $2
`

type ListAllPricesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListAllPrices(ctx context.Context, arg ListAllPricesParams) ([]Price, error) {
	rows, err := q.db.QueryContext(ctx, listAllPrices, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Price{}
	for rows.Next() {
		var i Price
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.Class,
			&i.Price,
			&i.Event,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const permaDeletePrice = `-- name: PermaDeletePrice :exec
DELETE FROM prices
WHERE id = $1
`

func (q *Queries) PermaDeletePrice(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, permaDeletePrice, id)
	return err
}

const softDeletePrice = `-- name: SoftDeletePrice :exec
UPDATE prices
SET deleted_at = NOW()
WHERE id = $1
`

func (q *Queries) SoftDeletePrice(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, softDeletePrice, id)
	return err
}

const updatePrice = `-- name: UpdatePrice :one
UPDATE prices
SET price = $2,
    updated_at = NOW()
WHERE id =  $1
RETURNING id, created_at, updated_at, deleted_at, class, price, event
`

type UpdatePriceParams struct {
	ID    int64   `json:"id"`
	Price float64 `json:"price"`
}

func (q *Queries) UpdatePrice(ctx context.Context, arg UpdatePriceParams) (Price, error) {
	row := q.db.QueryRowContext(ctx, updatePrice, arg.ID, arg.Price)
	var i Price
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.Class,
		&i.Price,
		&i.Event,
	)
	return i, err
}
