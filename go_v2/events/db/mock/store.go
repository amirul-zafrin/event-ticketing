// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/amirul-zafrin/event/db/sqlc (interfaces: Store)

// Package mockdb is a generated GoMock package.
package mockdb

import (
	context "context"
	reflect "reflect"

	db "github.com/amirul-zafrin/event/db/sqlc"
	gomock "github.com/golang/mock/gomock"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// CreateEvent mocks base method.
func (m *MockStore) CreateEvent(arg0 context.Context, arg1 db.CreateEventParams) (db.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEvent", arg0, arg1)
	ret0, _ := ret[0].(db.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEvent indicates an expected call of CreateEvent.
func (mr *MockStoreMockRecorder) CreateEvent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEvent", reflect.TypeOf((*MockStore)(nil).CreateEvent), arg0, arg1)
}

// CreatePrice mocks base method.
func (m *MockStore) CreatePrice(arg0 context.Context, arg1 db.CreatePriceParams) (db.Price, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePrice", arg0, arg1)
	ret0, _ := ret[0].(db.Price)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePrice indicates an expected call of CreatePrice.
func (mr *MockStoreMockRecorder) CreatePrice(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePrice", reflect.TypeOf((*MockStore)(nil).CreatePrice), arg0, arg1)
}

// GetEvent mocks base method.
func (m *MockStore) GetEvent(arg0 context.Context, arg1 int64) (db.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEvent", arg0, arg1)
	ret0, _ := ret[0].(db.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEvent indicates an expected call of GetEvent.
func (mr *MockStoreMockRecorder) GetEvent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEvent", reflect.TypeOf((*MockStore)(nil).GetEvent), arg0, arg1)
}

// GetPrice mocks base method.
func (m *MockStore) GetPrice(arg0 context.Context, arg1 int64) (db.Price, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPrice", arg0, arg1)
	ret0, _ := ret[0].(db.Price)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPrice indicates an expected call of GetPrice.
func (mr *MockStoreMockRecorder) GetPrice(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPrice", reflect.TypeOf((*MockStore)(nil).GetPrice), arg0, arg1)
}

// ListAllEvents mocks base method.
func (m *MockStore) ListAllEvents(arg0 context.Context, arg1 db.ListAllEventsParams) ([]db.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAllEvents", arg0, arg1)
	ret0, _ := ret[0].([]db.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAllEvents indicates an expected call of ListAllEvents.
func (mr *MockStoreMockRecorder) ListAllEvents(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAllEvents", reflect.TypeOf((*MockStore)(nil).ListAllEvents), arg0, arg1)
}

// ListAllPrices mocks base method.
func (m *MockStore) ListAllPrices(arg0 context.Context, arg1 db.ListAllPricesParams) ([]db.Price, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAllPrices", arg0, arg1)
	ret0, _ := ret[0].([]db.Price)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAllPrices indicates an expected call of ListAllPrices.
func (mr *MockStoreMockRecorder) ListAllPrices(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAllPrices", reflect.TypeOf((*MockStore)(nil).ListAllPrices), arg0, arg1)
}

// PermaDeleteEvent mocks base method.
func (m *MockStore) PermaDeleteEvent(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PermaDeleteEvent", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// PermaDeleteEvent indicates an expected call of PermaDeleteEvent.
func (mr *MockStoreMockRecorder) PermaDeleteEvent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PermaDeleteEvent", reflect.TypeOf((*MockStore)(nil).PermaDeleteEvent), arg0, arg1)
}

// PermaDeletePrice mocks base method.
func (m *MockStore) PermaDeletePrice(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PermaDeletePrice", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// PermaDeletePrice indicates an expected call of PermaDeletePrice.
func (mr *MockStoreMockRecorder) PermaDeletePrice(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PermaDeletePrice", reflect.TypeOf((*MockStore)(nil).PermaDeletePrice), arg0, arg1)
}

// SoftDeleteEvent mocks base method.
func (m *MockStore) SoftDeleteEvent(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SoftDeleteEvent", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SoftDeleteEvent indicates an expected call of SoftDeleteEvent.
func (mr *MockStoreMockRecorder) SoftDeleteEvent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SoftDeleteEvent", reflect.TypeOf((*MockStore)(nil).SoftDeleteEvent), arg0, arg1)
}

// SoftDeletePrice mocks base method.
func (m *MockStore) SoftDeletePrice(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SoftDeletePrice", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SoftDeletePrice indicates an expected call of SoftDeletePrice.
func (mr *MockStoreMockRecorder) SoftDeletePrice(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SoftDeletePrice", reflect.TypeOf((*MockStore)(nil).SoftDeletePrice), arg0, arg1)
}

// UpdateEvent mocks base method.
func (m *MockStore) UpdateEvent(arg0 context.Context, arg1 db.UpdateEventParams) (db.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEvent", arg0, arg1)
	ret0, _ := ret[0].(db.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateEvent indicates an expected call of UpdateEvent.
func (mr *MockStoreMockRecorder) UpdateEvent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEvent", reflect.TypeOf((*MockStore)(nil).UpdateEvent), arg0, arg1)
}

// UpdateEventSeat mocks base method.
func (m *MockStore) UpdateEventSeat(arg0 context.Context, arg1 db.UpdateEventSeatParams) (db.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEventSeat", arg0, arg1)
	ret0, _ := ret[0].(db.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateEventSeat indicates an expected call of UpdateEventSeat.
func (mr *MockStoreMockRecorder) UpdateEventSeat(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEventSeat", reflect.TypeOf((*MockStore)(nil).UpdateEventSeat), arg0, arg1)
}

// UpdatePrice mocks base method.
func (m *MockStore) UpdatePrice(arg0 context.Context, arg1 db.UpdatePriceParams) (db.Price, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePrice", arg0, arg1)
	ret0, _ := ret[0].(db.Price)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePrice indicates an expected call of UpdatePrice.
func (mr *MockStoreMockRecorder) UpdatePrice(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePrice", reflect.TypeOf((*MockStore)(nil).UpdatePrice), arg0, arg1)
}
